// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gorph.proto

package gorph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GorphService_CreateEntity_FullMethodName           = "/gorph.v1.GorphService/CreateEntity"
	GorphService_GetEntity_FullMethodName              = "/gorph.v1.GorphService/GetEntity"
	GorphService_UpdateEntity_FullMethodName           = "/gorph.v1.GorphService/UpdateEntity"
	GorphService_DeleteEntity_FullMethodName           = "/gorph.v1.GorphService/DeleteEntity"
	GorphService_ListEntities_FullMethodName           = "/gorph.v1.GorphService/ListEntities"
	GorphService_CreateConnection_FullMethodName       = "/gorph.v1.GorphService/CreateConnection"
	GorphService_GetConnection_FullMethodName          = "/gorph.v1.GorphService/GetConnection"
	GorphService_UpdateConnection_FullMethodName       = "/gorph.v1.GorphService/UpdateConnection"
	GorphService_DeleteConnection_FullMethodName       = "/gorph.v1.GorphService/DeleteConnection"
	GorphService_ListConnections_FullMethodName        = "/gorph.v1.GorphService/ListConnections"
	GorphService_CreateInfrastructure_FullMethodName   = "/gorph.v1.GorphService/CreateInfrastructure"
	GorphService_GetInfrastructure_FullMethodName      = "/gorph.v1.GorphService/GetInfrastructure"
	GorphService_UpdateInfrastructure_FullMethodName   = "/gorph.v1.GorphService/UpdateInfrastructure"
	GorphService_DeleteInfrastructure_FullMethodName   = "/gorph.v1.GorphService/DeleteInfrastructure"
	GorphService_ListInfrastructures_FullMethodName    = "/gorph.v1.GorphService/ListInfrastructures"
	GorphService_GenerateDiagram_FullMethodName        = "/gorph.v1.GorphService/GenerateDiagram"
	GorphService_ImportYAML_FullMethodName             = "/gorph.v1.GorphService/ImportYAML"
	GorphService_ExportYAML_FullMethodName             = "/gorph.v1.GorphService/ExportYAML"
	GorphService_ValidateInfrastructure_FullMethodName = "/gorph.v1.GorphService/ValidateInfrastructure"
)

// GorphServiceClient is the client API for GorphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GorphServiceClient interface {
	// Entity management
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// Connection management
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	// Infrastructure management
	CreateInfrastructure(ctx context.Context, in *CreateInfrastructureRequest, opts ...grpc.CallOption) (*CreateInfrastructureResponse, error)
	GetInfrastructure(ctx context.Context, in *GetInfrastructureRequest, opts ...grpc.CallOption) (*GetInfrastructureResponse, error)
	UpdateInfrastructure(ctx context.Context, in *UpdateInfrastructureRequest, opts ...grpc.CallOption) (*UpdateInfrastructureResponse, error)
	DeleteInfrastructure(ctx context.Context, in *DeleteInfrastructureRequest, opts ...grpc.CallOption) (*DeleteInfrastructureResponse, error)
	ListInfrastructures(ctx context.Context, in *ListInfrastructuresRequest, opts ...grpc.CallOption) (*ListInfrastructuresResponse, error)
	// Diagram operations
	GenerateDiagram(ctx context.Context, in *GenerateDiagramRequest, opts ...grpc.CallOption) (*GenerateDiagramResponse, error)
	// Import/Export
	ImportYAML(ctx context.Context, in *ImportYAMLRequest, opts ...grpc.CallOption) (*ImportYAMLResponse, error)
	ExportYAML(ctx context.Context, in *ExportYAMLRequest, opts ...grpc.CallOption) (*ExportYAMLResponse, error)
	// Validation
	ValidateInfrastructure(ctx context.Context, in *ValidateInfrastructureRequest, opts ...grpc.CallOption) (*ValidateInfrastructureResponse, error)
}

type gorphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGorphServiceClient(cc grpc.ClientConnInterface) GorphServiceClient {
	return &gorphServiceClient{cc}
}

func (c *gorphServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, GorphService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, GorphService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEntityResponse)
	err := c.cc.Invoke(ctx, GorphService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, GorphService_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, GorphService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, GorphService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, GorphService_GetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, GorphService_UpdateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, GorphService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, GorphService_ListConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) CreateInfrastructure(ctx context.Context, in *CreateInfrastructureRequest, opts ...grpc.CallOption) (*CreateInfrastructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInfrastructureResponse)
	err := c.cc.Invoke(ctx, GorphService_CreateInfrastructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) GetInfrastructure(ctx context.Context, in *GetInfrastructureRequest, opts ...grpc.CallOption) (*GetInfrastructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfrastructureResponse)
	err := c.cc.Invoke(ctx, GorphService_GetInfrastructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) UpdateInfrastructure(ctx context.Context, in *UpdateInfrastructureRequest, opts ...grpc.CallOption) (*UpdateInfrastructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInfrastructureResponse)
	err := c.cc.Invoke(ctx, GorphService_UpdateInfrastructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) DeleteInfrastructure(ctx context.Context, in *DeleteInfrastructureRequest, opts ...grpc.CallOption) (*DeleteInfrastructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInfrastructureResponse)
	err := c.cc.Invoke(ctx, GorphService_DeleteInfrastructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ListInfrastructures(ctx context.Context, in *ListInfrastructuresRequest, opts ...grpc.CallOption) (*ListInfrastructuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInfrastructuresResponse)
	err := c.cc.Invoke(ctx, GorphService_ListInfrastructures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) GenerateDiagram(ctx context.Context, in *GenerateDiagramRequest, opts ...grpc.CallOption) (*GenerateDiagramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDiagramResponse)
	err := c.cc.Invoke(ctx, GorphService_GenerateDiagram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ImportYAML(ctx context.Context, in *ImportYAMLRequest, opts ...grpc.CallOption) (*ImportYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportYAMLResponse)
	err := c.cc.Invoke(ctx, GorphService_ImportYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ExportYAML(ctx context.Context, in *ExportYAMLRequest, opts ...grpc.CallOption) (*ExportYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportYAMLResponse)
	err := c.cc.Invoke(ctx, GorphService_ExportYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorphServiceClient) ValidateInfrastructure(ctx context.Context, in *ValidateInfrastructureRequest, opts ...grpc.CallOption) (*ValidateInfrastructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInfrastructureResponse)
	err := c.cc.Invoke(ctx, GorphService_ValidateInfrastructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GorphServiceServer is the server API for GorphService service.
// All implementations must embed UnimplementedGorphServiceServer
// for forward compatibility.
type GorphServiceServer interface {
	// Entity management
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// Connection management
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error)
	// Infrastructure management
	CreateInfrastructure(context.Context, *CreateInfrastructureRequest) (*CreateInfrastructureResponse, error)
	GetInfrastructure(context.Context, *GetInfrastructureRequest) (*GetInfrastructureResponse, error)
	UpdateInfrastructure(context.Context, *UpdateInfrastructureRequest) (*UpdateInfrastructureResponse, error)
	DeleteInfrastructure(context.Context, *DeleteInfrastructureRequest) (*DeleteInfrastructureResponse, error)
	ListInfrastructures(context.Context, *ListInfrastructuresRequest) (*ListInfrastructuresResponse, error)
	// Diagram operations
	GenerateDiagram(context.Context, *GenerateDiagramRequest) (*GenerateDiagramResponse, error)
	// Import/Export
	ImportYAML(context.Context, *ImportYAMLRequest) (*ImportYAMLResponse, error)
	ExportYAML(context.Context, *ExportYAMLRequest) (*ExportYAMLResponse, error)
	// Validation
	ValidateInfrastructure(context.Context, *ValidateInfrastructureRequest) (*ValidateInfrastructureResponse, error)
	mustEmbedUnimplementedGorphServiceServer()
}

// UnimplementedGorphServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGorphServiceServer struct{}

func (UnimplementedGorphServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedGorphServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedGorphServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedGorphServiceServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedGorphServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedGorphServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedGorphServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedGorphServiceServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedGorphServiceServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedGorphServiceServer) ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedGorphServiceServer) CreateInfrastructure(context.Context, *CreateInfrastructureRequest) (*CreateInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfrastructure not implemented")
}
func (UnimplementedGorphServiceServer) GetInfrastructure(context.Context, *GetInfrastructureRequest) (*GetInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfrastructure not implemented")
}
func (UnimplementedGorphServiceServer) UpdateInfrastructure(context.Context, *UpdateInfrastructureRequest) (*UpdateInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfrastructure not implemented")
}
func (UnimplementedGorphServiceServer) DeleteInfrastructure(context.Context, *DeleteInfrastructureRequest) (*DeleteInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfrastructure not implemented")
}
func (UnimplementedGorphServiceServer) ListInfrastructures(context.Context, *ListInfrastructuresRequest) (*ListInfrastructuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfrastructures not implemented")
}
func (UnimplementedGorphServiceServer) GenerateDiagram(context.Context, *GenerateDiagramRequest) (*GenerateDiagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDiagram not implemented")
}
func (UnimplementedGorphServiceServer) ImportYAML(context.Context, *ImportYAMLRequest) (*ImportYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportYAML not implemented")
}
func (UnimplementedGorphServiceServer) ExportYAML(context.Context, *ExportYAMLRequest) (*ExportYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportYAML not implemented")
}
func (UnimplementedGorphServiceServer) ValidateInfrastructure(context.Context, *ValidateInfrastructureRequest) (*ValidateInfrastructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInfrastructure not implemented")
}
func (UnimplementedGorphServiceServer) mustEmbedUnimplementedGorphServiceServer() {}
func (UnimplementedGorphServiceServer) testEmbeddedByValue()                      {}

// UnsafeGorphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GorphServiceServer will
// result in compilation errors.
type UnsafeGorphServiceServer interface {
	mustEmbedUnimplementedGorphServiceServer()
}

func RegisterGorphServiceServer(s grpc.ServiceRegistrar, srv GorphServiceServer) {
	// If the following call pancis, it indicates UnimplementedGorphServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GorphService_ServiceDesc, srv)
}

func _GorphService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_UpdateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ListConnections(ctx, req.(*ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_CreateInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).CreateInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_CreateInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).CreateInfrastructure(ctx, req.(*CreateInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_GetInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).GetInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_GetInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).GetInfrastructure(ctx, req.(*GetInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_UpdateInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).UpdateInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_UpdateInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).UpdateInfrastructure(ctx, req.(*UpdateInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_DeleteInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).DeleteInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_DeleteInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).DeleteInfrastructure(ctx, req.(*DeleteInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ListInfrastructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfrastructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ListInfrastructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ListInfrastructures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ListInfrastructures(ctx, req.(*ListInfrastructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_GenerateDiagram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDiagramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).GenerateDiagram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_GenerateDiagram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).GenerateDiagram(ctx, req.(*GenerateDiagramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ImportYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ImportYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ImportYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ImportYAML(ctx, req.(*ImportYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ExportYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ExportYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ExportYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ExportYAML(ctx, req.(*ExportYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorphService_ValidateInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorphServiceServer).ValidateInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GorphService_ValidateInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorphServiceServer).ValidateInfrastructure(ctx, req.(*ValidateInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GorphService_ServiceDesc is the grpc.ServiceDesc for GorphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GorphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorph.v1.GorphService",
	HandlerType: (*GorphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _GorphService_CreateEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _GorphService_GetEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _GorphService_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _GorphService_DeleteEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _GorphService_ListEntities_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _GorphService_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _GorphService_GetConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _GorphService_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _GorphService_DeleteConnection_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _GorphService_ListConnections_Handler,
		},
		{
			MethodName: "CreateInfrastructure",
			Handler:    _GorphService_CreateInfrastructure_Handler,
		},
		{
			MethodName: "GetInfrastructure",
			Handler:    _GorphService_GetInfrastructure_Handler,
		},
		{
			MethodName: "UpdateInfrastructure",
			Handler:    _GorphService_UpdateInfrastructure_Handler,
		},
		{
			MethodName: "DeleteInfrastructure",
			Handler:    _GorphService_DeleteInfrastructure_Handler,
		},
		{
			MethodName: "ListInfrastructures",
			Handler:    _GorphService_ListInfrastructures_Handler,
		},
		{
			MethodName: "GenerateDiagram",
			Handler:    _GorphService_GenerateDiagram_Handler,
		},
		{
			MethodName: "ImportYAML",
			Handler:    _GorphService_ImportYAML_Handler,
		},
		{
			MethodName: "ExportYAML",
			Handler:    _GorphService_ExportYAML_Handler,
		},
		{
			MethodName: "ValidateInfrastructure",
			Handler:    _GorphService_ValidateInfrastructure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorph.proto",
}
